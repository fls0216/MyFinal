{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.pylab as plb\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "import matplotlib.font_manager as fm\n",
    "font_name = fm.FontProperties(fname = 'C:\\\\Windows\\\\Fonts\\\\malgun.ttf').get_name()\n",
    "plt.rc('font', family = font_name)\n",
    "mpl.rcParams['axes.unicode_minus'] = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 깃헙을 이용한 경로\n",
    "train = pd.read_csv('C:\\\\Users\\\\noeul\\\\noeul\\\\3조\\\\최종 프로젝트\\\\TeamProject\\\\open data\\\\train_nh2.csv', index_col = [0])\n",
    "train=train.reset_index(drop=True)\n",
    "pd.set_option('display.max_columns', 150)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "test = pd.read_csv('C:\\\\Users\\\\noeul\\\\noeul\\\\3조\\\\최종 프로젝트\\\\TeamProject\\\\open data\\\\teat_nh2.csv',encoding=\"euc-kr\",index_col = [0])\n",
    "test=test.reset_index(drop=True)\n",
    "pd.set_option('display.max_columns', 150)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['tp_group'] = np.where(train['tp_score']<=train['tp_score'].quantile(.25),0,train['tp_score'])\n",
    "train['tp_group'] = np.where(train['tp_score']>=train['tp_score'].quantile(.75),2,train['tp_group'])\n",
    "train['tp_group'] = np.where((train['tp_score']>=train['tp_score'].quantile(.25)) & (train['tp_score']<=train['tp_score'].quantile(.75)),1,train['tp_group'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['tp_group'] = np.where(test['tp_score']<=test['tp_score'].quantile(.25),0,test['tp_score'])\n",
    "test['tp_group'] = np.where(test['tp_score']>=test['tp_score'].quantile(.75),2,test['tp_group'])\n",
    "test['tp_group'] = np.where((test['tp_score']>=test['tp_score'].quantile(.25)) & (test['tp_score']<=test['tp_score'].quantile(.75)),1,test['tp_group'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>education</th>\n",
       "      <th>married</th>\n",
       "      <th>voted</th>\n",
       "      <th>wr_01</th>\n",
       "      <th>wr_06</th>\n",
       "      <th>wr_new</th>\n",
       "      <th>age_10s</th>\n",
       "      <th>age4</th>\n",
       "      <th>race_white</th>\n",
       "      <th>Mach_score</th>\n",
       "      <th>mach_per</th>\n",
       "      <th>tp_score</th>\n",
       "      <th>tp_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3.6</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   education  married  voted  wr_01  wr_06  wr_new  age_10s  age4  race_white  \\\n",
       "0          2        3      2      0      0       0        0     1           1   \n",
       "1          4        1      2      0      0       0        0     1           0   \n",
       "2          3        2      1      1      0       0        0     1           1   \n",
       "3          4        1      1      0      0       0        0     1           0   \n",
       "4          3        2      1      1      1       1        0     1           1   \n",
       "\n",
       "   Mach_score  mach_per  tp_score  tp_group  \n",
       "0           2         1       3.6       2.0  \n",
       "1           2         0       2.4       1.0  \n",
       "2           1         0       1.8       0.0  \n",
       "3           3         1       2.2       1.0  \n",
       "4           3         1       1.3       0.0  "
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 2], dtype=int64)"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"mach_per\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['mach_per1'] = np.where(train['mach_per']==1,'mach_mid',train['mach_per'])\n",
    "train['mach_per1'] = np.where(train['mach_per']==0,'mach_low',train['mach_per1'])\n",
    "train['mach_per1'] = np.where(train['mach_per']==2,'mach_big',train['mach_per1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['mach_per1'] = np.where(test['mach_per']==1,'mach_mid',test['mach_per'])\n",
    "test['mach_per1'] = np.where(test['mach_per']==0,'mach_low',test['mach_per1'])\n",
    "test['mach_per1'] = np.where(test['mach_per']==2,'mach_big',test['mach_per1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['married1'] = np.where(train['married']==1,'Never',train['married'])\n",
    "train['married1'] = np.where(train['married']==2, 'Currently',train['married1'])\n",
    "train['married1'] = np.where(train['married']==3, 'Previously',train['married1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['married1'] = np.where(test['married']==1,'Never',test['married'])\n",
    "test['married1'] = np.where(test['married']==2, 'Currently',test['married1'])\n",
    "test['married1'] = np.where(test['married']==3, 'Previously',test['married1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "del train['tp_score']\n",
    "del test['tp_score']\n",
    "\n",
    "del train['Mach_score']\n",
    "del test['Mach_score']\n",
    "\n",
    "del train['married']\n",
    "del test['married']\n",
    "\n",
    "del train['mach_per']\n",
    "del test['mach_per']\n",
    "\n",
    "del train['age4']\n",
    "del test['age4']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>education</th>\n",
       "      <th>voted</th>\n",
       "      <th>wr_01</th>\n",
       "      <th>wr_06</th>\n",
       "      <th>wr_new</th>\n",
       "      <th>age_10s</th>\n",
       "      <th>race_white</th>\n",
       "      <th>tp_group</th>\n",
       "      <th>mach_per1</th>\n",
       "      <th>married1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>mach_mid</td>\n",
       "      <td>Previously</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>mach_low</td>\n",
       "      <td>Never</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>mach_low</td>\n",
       "      <td>Currently</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>mach_mid</td>\n",
       "      <td>Never</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>mach_mid</td>\n",
       "      <td>Currently</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   education  voted  wr_01  wr_06  wr_new  age_10s  race_white  tp_group  \\\n",
       "0          2      2      0      0       0        0           1       2.0   \n",
       "1          4      2      0      0       0        0           0       1.0   \n",
       "2          3      1      1      0       0        0           1       0.0   \n",
       "3          4      1      0      0       0        0           0       1.0   \n",
       "4          3      1      1      1       1        0           1       0.0   \n",
       "\n",
       "  mach_per1    married1  \n",
       "0  mach_mid  Previously  \n",
       "1  mach_low       Never  \n",
       "2  mach_low   Currently  \n",
       "3  mach_mid       Never  \n",
       "4  mach_mid   Currently  "
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11383, 9)"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "train=pd.concat([train, pd.get_dummies(train['education'])], axis = 1)\n",
    "train=pd.concat([train, pd.get_dummies(train['married1'])], axis = 1)\n",
    "train=pd.concat([train, pd.get_dummies(train['mach_per1'])], axis = 1)\n",
    "train=pd.concat([train, pd.get_dummies(train['tp_group'])], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "test=pd.concat([train, pd.get_dummies(test['education'])], axis = 1)\n",
    "test=pd.concat([train, pd.get_dummies(test['married1'])], axis = 1)\n",
    "test=pd.concat([train, pd.get_dummies(test['mach_per1'])], axis = 1)\n",
    "test=pd.concat([train, pd.get_dummies(test['tp_group'])], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "del train['education']\n",
    "del train['married1']\n",
    "del train['mach_per1']\n",
    "del train['tp_group']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "del test['education']\n",
    "del test['married1']\n",
    "del test['mach_per1']\n",
    "del test['tp_group']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = train.drop(\"voted\", axis=1)\n",
    "y = train[\"voted\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n"
     ]
    }
   ],
   "source": [
    "cat_features = list(range(0, X.shape[1]))\n",
    "print(cat_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(45532, 18)"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wr_01</th>\n",
       "      <th>wr_06</th>\n",
       "      <th>wr_new</th>\n",
       "      <th>age_10s</th>\n",
       "      <th>race_white</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>Currently</th>\n",
       "      <th>Never</th>\n",
       "      <th>Previously</th>\n",
       "      <th>mach_big</th>\n",
       "      <th>mach_low</th>\n",
       "      <th>mach_mid</th>\n",
       "      <th>0.0</th>\n",
       "      <th>1.0</th>\n",
       "      <th>2.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   wr_01  wr_06  wr_new  age_10s  race_white  1  2  3  4  Currently  Never  \\\n",
       "0      0      0       0        0           1  0  1  0  0          0      0   \n",
       "1      0      0       0        0           0  0  0  0  1          0      1   \n",
       "2      1      0       0        0           1  0  0  1  0          1      0   \n",
       "3      0      0       0        0           0  0  0  0  1          0      1   \n",
       "4      1      1       1        0           1  0  0  1  0          1      0   \n",
       "\n",
       "   Previously  mach_big  mach_low  mach_mid  0.0  1.0  2.0  \n",
       "0           1         0         0         1    0    0    1  \n",
       "1           0         0         1         0    0    1    0  \n",
       "2           0         0         1         0    1    0    0  \n",
       "3           0         0         0         1    0    1    0  \n",
       "4           0         0         0         1    1    0    0  "
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CatBoost model is fitted: True\n",
      "CatBoost model parameters:\n",
      "{'iterations': 5, 'learning_rate': 0.1}\n"
     ]
    }
   ],
   "source": [
    "from catboost import CatBoostClassifier\n",
    "\n",
    "clf = CatBoostClassifier(\n",
    "    iterations=5, \n",
    "    learning_rate=0.1, \n",
    "    #loss_function='CrossEntropy'\n",
    ")\n",
    "\n",
    "\n",
    "clf.fit(X_train, y_train, \n",
    "        cat_features=cat_features, \n",
    "        eval_set=(X_val, y_val), \n",
    "        verbose=False\n",
    ")\n",
    "\n",
    "print('CatBoost model is fitted: ' + str(clf.is_fitted()))\n",
    "print('CatBoost model parameters:')\n",
    "print(clf.get_params())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Learning rate set to 0.5\n",
      "0:\tlearn: 0.6167865\ttest: 0.6139539\tbest: 0.6139539 (0)\ttotal: 12.5ms\tremaining: 112ms\n",
      "1:\tlearn: 0.5884306\ttest: 0.5855716\tbest: 0.5855716 (1)\ttotal: 25.9ms\tremaining: 104ms\n",
      "2:\tlearn: 0.5768300\ttest: 0.5745004\tbest: 0.5745004 (2)\ttotal: 38.8ms\tremaining: 90.6ms\n",
      "3:\tlearn: 0.5715293\ttest: 0.5696333\tbest: 0.5696333 (3)\ttotal: 51.7ms\tremaining: 77.6ms\n",
      "4:\tlearn: 0.5685574\ttest: 0.5677871\tbest: 0.5677871 (4)\ttotal: 64.8ms\tremaining: 64.8ms\n",
      "5:\tlearn: 0.5664545\ttest: 0.5658136\tbest: 0.5658136 (5)\ttotal: 77.6ms\tremaining: 51.7ms\n",
      "6:\tlearn: 0.5654763\ttest: 0.5652136\tbest: 0.5652136 (6)\ttotal: 89.1ms\tremaining: 38.2ms\n",
      "7:\tlearn: 0.5648357\ttest: 0.5654023\tbest: 0.5652136 (6)\ttotal: 102ms\tremaining: 25.4ms\n",
      "8:\tlearn: 0.5647107\ttest: 0.5653924\tbest: 0.5652136 (6)\ttotal: 111ms\tremaining: 12.3ms\n",
      "9:\tlearn: 0.5642171\ttest: 0.5653875\tbest: 0.5652136 (6)\ttotal: 125ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.5652135788\n",
      "bestIteration = 6\n",
      "\n",
      "Shrink model to first 7 iterations.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<catboost.core.CatBoostClassifier at 0x25550399348>"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from catboost import CatBoostClassifier\n",
    "clf = CatBoostClassifier(\n",
    "    iterations=10,\n",
    "#     verbose=5,\n",
    ")\n",
    "\n",
    "clf.fit(\n",
    "    X_train, y_train,\n",
    "    cat_features=cat_features,\n",
    "    eval_set=(X_val, y_val),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_pro = clf.predict_proba(data=X_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.12087566, 0.87912434],\n",
       "       [0.42527111, 0.57472889],\n",
       "       [0.45874969, 0.54125031],\n",
       "       ...,\n",
       "       [0.03385323, 0.96614677],\n",
       "       [0.15061993, 0.84938007],\n",
       "       [0.03360576, 0.96639424]])"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_pro"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = clf.predict(data=X_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 2, 2, ..., 2, 2, 2], dtype=int64)"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6879323597232898"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_val,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
